import logging
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

# –°–¢–ê–î–ò–ò
GOAL, TARIFF, NAME, PHONE, CITY, DESCRIPTION, CONTACT, CONFIRM, OFFER = range(9)

# Telegram Token
TOKEN = "7669134121:AAEJfFPOk-Br92s74tcGXW5Fb1izDC7qRPM"

# Google Sheets setup
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open_by_key("1JyMp0g6krlalSWZcduOwFE_A1C8Ut9WiQSMOJR9UXsw").sheet1

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –¢–∞—Ä–∏—Ñ—ã
tariffs = {
    "–ë–∞–∑–æ–≤—ã–π (5 000 ‚ÇΩ)": "‚úÖ –í—Ö–æ–¥–∏—Ç:\n‚Ä¢ –§–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞\n‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞\n‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è\n‚Ä¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ\n‚Ä¢ –†–µ–∫–ª–∞–º–∞\n‚Ä¢ –ß–µ–∫-–ª–∏—Å—Ç\n‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
    "–ü—Ä–µ–º–∏—É–º (10 000 ‚ÇΩ)": "‚úÖ –í—Ö–æ–¥–∏—Ç –≤—Å—ë –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ +\n‚Ä¢ –®–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n‚Ä¢ –ü–æ–º–æ—â—å —Å –ø–æ–∫–∞–∑–∞–º–∏\n‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n‚Ä¢ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞–º"
}

# –®–∞–≥ 1 ‚Äî –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [["–ü—Ä–æ–¥–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"], ["–ö—É–ø–∏—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"], ["–ü–æ–¥–æ–±—Ä–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫—É"]]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Vligate ‚Äî –≤–∞—à –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.\n\n"
        "üí¨ –û –Ω–∞—Å:\n‚Ä¢ –†–∞–±–æ—Ç–∞–µ–º –æ—Ç 5 000 ‚ÇΩ\n‚Ä¢ –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å\n‚Ä¢ –ü–æ–º–æ—â—å —Å –ø—Ä–æ–¥–∞–∂–µ–π, –ø–æ–∫—É–ø–∫–æ–π, –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞–º–∏\n‚Ä¢ –ë–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –∫–æ–º–∏—Å—Å–∏–π\n\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return GOAL

# –®–∞–≥ 2 ‚Äî –¶–µ–ª—å
async def goal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["goal"] = update.message.text
    if update.message.text == "–ü–æ–¥–æ–±—Ä–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫—É":
        context.user_data["tariff"] = "–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏ (0 ‚ÇΩ)"
        return await name(update, context)
    else:
        keyboard = [["–ë–∞–∑–æ–≤—ã–π (5 000 ‚ÇΩ)"], ["–ü—Ä–µ–º–∏—É–º (10 000 ‚ÇΩ)"]]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))
        return TARIFF

# –®–∞–≥ 3 ‚Äî –¢–∞—Ä–∏—Ñ
async def tariff(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["tariff"] = update.message.text
    await update.message.reply_text(f"{tariffs[update.message.text]}")
    await update.message.reply_text("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=ReplyKeyboardRemove())
    return NAME

# –®–∞–≥ 4 ‚Äî –ò–º—è
async def name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return PHONE

# –®–∞–≥ 5 ‚Äî –¢–µ–ª–µ—Ñ–æ–Ω
async def phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["phone"] = update.message.text
    await update.message.reply_text("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏–ª–∏ —Ä–∞–π–æ–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–±—ä–µ–∫—Ç?")
    return CITY

# –®–∞–≥ 6 ‚Äî –ì–æ—Ä–æ–¥
async def city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["city"] = update.message.text
    await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ (—Ç–∏–ø, —Å—Ä–æ—á–Ω–æ—Å—Ç—å, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏):")
    return DESCRIPTION

# –®–∞–≥ 7 ‚Äî –û–ø–∏—Å–∞–Ω–∏–µ
async def description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["description"] = update.message.text
    keyboard = [["Telegram"], ["WhatsApp"], ["–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫"]]
    await update.message.reply_text("–ö–∞–∫ —É–¥–æ–±–Ω–µ–µ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))
    return CONTACT

# –®–∞–≥ 8 ‚Äî –ö–æ–Ω—Ç–∞–∫—Ç
async def contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["contact"] = update.message.text
    keyboard = [["‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é –∏ —Å–æ–≥–ª–∞—à–∞—é—Å—å"], ["‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω"]]
    await update.message.reply_text(
        "üìÑ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏:\n‚Ä¢ https://vligate.tilda.ws/oferta\n‚Ä¢ https://vligate.tilda.ws/privacy\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return OFFER

# –®–∞–≥ 9 ‚Äî –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ñ–µ—Ä—Ç—ã
async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    accepted = update.message.text
    if accepted.startswith("‚ùå"):
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ Vligate!")
        return ConversationHandler.END

    context.user_data["offer"] = "–°–æ–≥–ª–∞—Å–µ–Ω"

    now = datetime.now().strftime("%d/%m/%Y %H:%M")
    row = [
        now,
        context.user_data["name"],
        context.user_data["phone"],
        context.user_data["city"],
        context.user_data["goal"],
        context.user_data["tariff"],
        context.user_data["description"],
        context.user_data["contact"],
        context.user_data["offer"]
    ]
    sheet.append_row(row)

    await update.message.reply_text("üéâ –°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –°–≤—è–∂–µ–º—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 30‚Äì60 –º–∏–Ω—É—Ç.")
    return ConversationHandler.END

# –°—Ü–µ–Ω–∞—Ä–∏–π
def main():
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, goal)],
            TARIFF: [MessageHandler(filters.TEXT & ~filters.COMMAND, tariff)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone)],
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, description)],
            CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, contact)],
            OFFER: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm)],
        },
        fallbacks=[]
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()




