
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters, ConversationHandler
)

import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –≠—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
GOAL, TARIFF, NAME, PHONE, CITY, DESCRIPTION, CONTACT, CONFIRM = range(8)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–µ
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
gc = gspread.authorize(credentials)
spreadsheet = gc.open_by_url("https://docs.google.com/spreadsheets/d/1JyMp0g6krlalSWZcduOwFE_A1C8Ut9WiQSMOJR9UXsw/edit")
worksheet = spreadsheet.sheet1

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_to_sheet(data):
    worksheet.append_row([
        data.get("name", ""),
        data.get("phone", ""),
        data.get("city", ""),
        data.get("goal", ""),
        data.get("tariff", ""),
        data.get("description", ""),
        data.get("contact", "")
    ])

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Vligate ‚Äî –≤–∞—à –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.\n"
        "–ú—ã ‚Äî –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ —Ä–∏–µ–ª—Ç–æ—Ä–∞–º: –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∏ –Ω–∞–¥—ë–∂–Ω—ã–π –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å.\n\n"
        "üí¨ –û –Ω–∞—Å:\n"
        "‚Ä¢ –†–∞–±–æ—Ç–∞–µ–º –ø–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω–µ ‚Äî –æ—Ç 5 000 ‚ÇΩ\n"
        "‚Ä¢ –ü–æ–º–æ–≥–∞–µ–º —Å –ø—Ä–æ–¥–∞–∂–µ–π, –ø–æ–∫—É–ø–∫–æ–π –∏–ª–∏ –ø–æ–¥–±–æ—Ä–æ–º –Ω–æ–≤–æ—Å—Ç—Ä–æ–µ–∫\n"
        "‚Ä¢ –†–∞–±–æ—Ç–∞–µ–º –≤ –¢–≤–µ—Ä–∏ –∏ –æ–Ω–ª–∞–π–Ω –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏\n"
        "‚Ä¢ –ë–µ–∑ % –∏ —Å–∫—Ä—ã—Ç—ã—Ö –∫–æ–º–∏—Å—Å–∏–π\n\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=ReplyKeyboardMarkup(
            [["–ü—Ä–æ–¥–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "–ö—É–ø–∏—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "–ü–æ–¥–æ–±—Ä–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫—É"]],
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    return GOAL

async def goal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["goal"] = update.message.text
    if context.user_data["goal"] in ["–ü—Ä–æ–¥–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "–ö—É–ø–∏—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å"]:
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:",
            reply_markup=ReplyKeyboardMarkup(
                [["–ë–∞–∑–æ–≤—ã–π (5 000 ‚ÇΩ)", "–ü—Ä–µ–º–∏—É–º (10 000 ‚ÇΩ)"]],
                one_time_keyboard=True,
                resize_keyboard=True
            )
        )
        return TARIFF
    else:
        context.user_data["tariff"] = "–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)"
        await update.message.reply_text("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
        return NAME

async def tariff(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["tariff"] = update.message.text
    await update.message.reply_text("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    return NAME

async def name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:")
    return PHONE

async def phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["phone"] = update.message.text
    await update.message.reply_text("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏–ª–∏ —Ä–∞–π–æ–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–±—ä–µ–∫—Ç?")
    return CITY

async def city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["city"] = update.message.text
    await update.message.reply_text("–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ? (–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ)")
    return DESCRIPTION

async def description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["description"] = update.message.text
    await update.message.reply_text(
        "–ö–∞–∫ —É–¥–æ–±–Ω–µ–µ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?",
        reply_markup=ReplyKeyboardMarkup(
            [["Telegram", "WhatsApp", "–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫"]],
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    return CONTACT

async def contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["contact"] = update.message.text
    await update.message.reply_text(
        "–ü—Ä–∏–º–∏—Ç–µ –ª–∏ –≤—ã —É—Å–ª–æ–≤–∏—è –æ—Ñ–µ—Ä—Ç—ã –∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?\n"
        "üìÑ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å –ø–æ —Å—Å—ã–ª–∫–∞–º:\n"
        "‚Ä¢ https://vligate.tilda.ws/oferta\n"
        "‚Ä¢ https://vligate.tilda.ws/privacy\n",
        reply_markup=ReplyKeyboardMarkup(
            [["‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é –∏ —Å–æ–≥–ª–∞—à–∞—é—Å—å", "‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω"]],
            one_time_keyboard=True,
            resize_keyboard=True
        )
    )
    return CONFIRM

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == "‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é –∏ —Å–æ–≥–ª–∞—à–∞—é—Å—å":
        save_to_sheet(context.user_data)
        await update.message.reply_text(
            "üéâ –°–ø–∞—Å–∏–±–æ! –ú—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É.\n"
            "–í —Ç–µ—á–µ–Ω–∏–µ 30‚Äì60 –º–∏–Ω—É—Ç —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä Vligate (–í–ª–∞–¥).\n"
            "–ê –ø–æ–∫–∞ –∑–∞–≥–ª—è–Ω–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç ‚Äî vligate.tilda.ws"
        )
    else:
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –º—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")
    return ConversationHandler.END

app = ApplicationBuilder().token("–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê").build()

conv = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, goal)],
        TARIFF: [MessageHandler(filters.TEXT & ~filters.COMMAND, tariff)],
        NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
        PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone)],
        CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city)],
        DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, description)],
        CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, contact)],
        CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm)],
    },
    fallbacks=[CommandHandler("cancel", cancel)]
)

app.add_handler(conv)
app.run_polling()
